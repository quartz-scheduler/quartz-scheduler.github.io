# Jekyll site
# Package your Jekyll site using the jekyll/builder Docker container image.
# Add steps that build, test, save build artifacts, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu 16.04'

steps:
- checkout: self
  persistCredentials: 'true'
  clean: 'true'
- task: YodLabs.VariableTasks.SetVariablesWithCredentials.SetVariablesWithCredentials@0
  displayName: 'Github auth'
  inputs:
    ConnectionName: gh-push-tc-org
    userNameVarName: U
    passwordVarName: P
- task: Docker@0
  displayName: 'Jekyll and all Ruby steps'
  inputs:
    containerRegistryType: 'Container Registry'
    action: 'Run an image'
    # should match Gemfile:
    imageName: 'jekyll/builder:3.7.3'
    volumes: |
      $(build.sourcesDirectory):/srv/jekyll
      $(build.binariesDirectory):/srv/jekyll/_site
    containerCommand: 'sh -x -c "bundle install && JEKYLL_ENV=production jekyll build"'
    detached: false
- bash: |
    set -e
    # not sure why some files are root owned, maybe docker
    sudo chown -R $(id -u):$(id -g) $BUILD_SOURCESDIRECTORY $BUILD_BINARIESDIRECTORY
    COMMIT=$(git rev-parse HEAD)
    # Determine whether to publish staging or live site
    if [ -n "$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER" ] ; then
      gh_url="https://$U:$P@github.com/quartz-scheduler/quartz-scheduler.org-site.git"
      gh_branch=gh-pages
      gh_source="#${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER}"
      echo "Publishing staging from $gh_source"
    elif [ "$BUILD_SOURCEBRANCHNAME" == 'master' ] ; then
      gh_url="https://$U:$P@github.com/quartz-scheduler/quartz-scheduler.github.io.git"
      gh_branch=master
      gh_source=master
      echo "Publishing Live site"
      (bash add-analytics.sh $BUILD_SOURCESDIRECTORY $BUILD_BINARIESDIRECTORY)
    else
      echo "Unknown branch to deploy: $BUILD_SOURCEBRANCHNAME"
      exit 5
    fi
    rm -rf * .git*  # start clean in source directory
    git clone --single-branch -b $gh_branch $gh_url remote-site
    cd remote-site
    echo "Target dir:"; ls -l
    echo "Generated dir:"; ls -l $BUILD_BINARIESDIRECTORY
    rsync -a --delete --exclude .git --exclude CNAME $BUILD_BINARIESDIRECTORY/ .
    echo "Result:"; ls -l
    git config --local user.name "autogen"
    git config --local user.email "autogen-noreply@no-reply.softwareag.com"
    git add -A .
    git status
    git commit -m "Autogenerated from ${gh_source} ${COMMIT}"
    git push $gh_url $gh_branch
  displayName: 'Publish'
